AWSTemplateFormatVersion: 2010-09-09
Description: Root stack for Kendra App
Parameters:
  DeploymentBucketName:
    Description: Name of the common deployment bucket provided by the parent stack
    Type: String
    Default: DeploymentBucket
  ApplicationPrefix:
    Description: A prefix to be used for providing a unique name to the app and its components
    Type: String
    Default: 20200204
  AuthRoleName:
    Type: String
    Default: KendraAppAuthRoleName
  UnauthRoleName:
    Type: String
    Default: KendraAppUnauthRoleName
Resources:
  DeploymentBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref DeploymentBucketName
  KendraAppAuthRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref AuthRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Deny
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
  KendraAppUnauthRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref UnauthRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Deny
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
  AuthKendraChatbot:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: >-
        https://s3.amazonaws.com/kendra-app-dev-deployment/cfn-templates/kendra-chat-botidp-stack.yml
      Parameters:
        identityPoolName: !Join ['_',['kendra_chatbot_identitypool', !Ref ApplicationPrefix]]
        allowUnauthenticatedIdentities: true
        resourceNameTruncated: !Join ['_', ['kendra', !Ref ApplicationPrefix]]
        userPoolName: !Join ['_', ['kendra_chatbot_userpool', !Ref ApplicationPrefix]]
        autoVerifiedAttributes: email
        mfaConfiguration: 'OFF'
        mfaTypes: SMS Text Message
        smsAuthenticationMessage: 'Your authentication code is {####}'
        smsVerificationMessage: 'Your verification code is {####}'
        emailVerificationSubject: Your verification code
        emailVerificationMessage: 'Your verification code is {####}'
        defaultPasswordPolicy: false
        passwordPolicyMinLength: 8
        passwordPolicyCharacters: ''
        requiredAttributes: email
        userpoolClientGenerateSecret: true
        userpoolClientRefreshTokenValidity: 30
        userpoolClientWriteAttributes: email
        userpoolClientReadAttributes: email
        userpoolClientLambdaRole: !Join ['_', [!Join ['_', ['kendra', !Ref ApplicationPrefix]], 'userpool_client_lambda_role']]
        userpoolClientSetAttributes: false
        resourceName: !Join ['_', ['kendra_chatbot', !Ref ApplicationPrefix]]
        authSelections: identityPoolAndUserPool
        authRoleArn: !GetAtt 
          - KendraAppAuthRole
          - Arn
        unauthRoleArn: !GetAtt 
          - KendraAppUnauthRole
          - Arn
        useDefault: default
        usernameAttributes: email
        userPoolGroupList: ''
        dependsOn: ''
        env: dev
  # interactionskendralex:
  #   Type: 'AWS::CloudFormation::Stack'
  #   Properties:
  #     TemplateURL: >-
  #       https://s3.amazonaws.com/amplify-kendra-chat-bot-dev-112035-deployment/amplify-cfn-templates/interactions/kendralex2020-cloudformation-template.json
  #     Parameters:
  #       authRoleArn: !GetAtt
  #         - KendraAppAuthRole
  #         - Arn
  #       authRoleName: !Ref KendraAppAuthRoleName
  #       unauthRoleName: !Ref KendraAppUnauthRoleName
  #       env: dev
  # hostingS3AndCloudFront:
  #   Type: 'AWS::CloudFormation::Stack'
  #   Properties:
  #     TemplateURL: >-
  #       https://s3.amazonaws.com/amplify-kendra-chat-bot-dev-112035-deployment/amplify-cfn-templates/hosting/template.json
  #     Parameters:
  #       bucketName: kendra-chat-bot-hosting-bucket
  #       env: dev
  # functionkendraSearch:
  #   Type: 'AWS::CloudFormation::Stack'
  #   Properties:
  #     TemplateURL: >-
  #       https://s3.amazonaws.com/amplify-kendra-chat-bot-dev-112035-deployment/amplify-cfn-templates/function/kendraSearch-cloudformation-template.json
  #     Parameters:
  #       env: dev
  # apisearchApi:
  #   Type: 'AWS::CloudFormation::Stack'
  #   Properties:
  #     TemplateURL: >-
  #       https://s3.amazonaws.com/amplify-kendra-chat-bot-dev-112035-deployment/amplify-cfn-templates/api/searchApi-cloudformation-template.json
  #     Parameters:
  #       authRoleName: !Ref KendraAppAuthRoleName
  #       unauthRoleName: !Ref KendraAppUnauthRoleName
  #       functionkendraSearchName: !GetAtt
  #         - functionkendraSearch
  #         - Outputs.Name
  #       functionkendraSearchArn: !GetAtt
  #         - functionkendraSearch
  #         - Outputs.Arn
  #       env: dev
  # UpdateRolesWithIDPFunction:
  #   DependsOn:
  #     - KendraAppAuthRole
  #     - KendraAppUnauthRole
  #     - authkendrachatbotd2fda923
  #   Type: 'AWS::Lambda::Function'
  #   Properties:
  #     Code:
  #       ZipFile: !Join 
  #         - |+

  #         - - const response = require('cfn-response');
  #           - const aws = require('aws-sdk');
  #           - 'let responseData = {};'
  #           - 'exports.handler = function(event, context) {'
  #           - '  try {'
  #           - '    let authRoleName = event.ResourceProperties.authRoleName;'
  #           - '    let unauthRoleName = event.ResourceProperties.unauthRoleName;'
  #           - '    let idpId = event.ResourceProperties.idpId;'
  #           - '    let promises = [];'
  #           - '    let authParamsJson = { ''Version'': ''2012-10-17'',''Statement'': [{''Effect'': ''Allow'',''Principal'': {''Federated'': ''cognito-identity.amazonaws.com''},''Action'': ''sts:AssumeRoleWithWebIdentity'',''Condition'': {''StringEquals'': {''cognito-identity.amazonaws.com:aud'': idpId},''ForAnyValue:StringLike'': {''cognito-identity.amazonaws.com:amr'': ''authenticated''}}}]};'
  #           - '    let unauthParamsJson = { ''Version'': ''2012-10-17'',''Statement'': [{''Effect'': ''Allow'',''Principal'': {''Federated'': ''cognito-identity.amazonaws.com''},''Action'': ''sts:AssumeRoleWithWebIdentity'',''Condition'': {''StringEquals'': {''cognito-identity.amazonaws.com:aud'': idpId},''ForAnyValue:StringLike'': {''cognito-identity.amazonaws.com:amr'': ''unauthenticated''}}}]};'
  #           - '    if (event.RequestType == ''Delete'') {'
  #           - '        delete authParamsJson.Statement.Condition;'
  #           - '        delete unauthParamsJson.Statement.Condition;'
  #           - '        let authParams = { PolicyDocument: JSON.stringify(authParamsJson),RoleName: authRoleName};'
  #           - '        let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson),RoleName: unauthRoleName};'
  #           - '        const iam = new aws.IAM({ apiVersion: ''2010-05-08'', region: event.ResourceProperties.region});'
  #           - '        promises.push(iam.updateAssumeRolePolicy(authParams).promise());'
  #           - '        promises.push(iam.updateAssumeRolePolicy(unauthParams).promise());'
  #           - '        Promise.all(promises)'
  #           - '         .then((res) => {'
  #           - '            console.log("delete response data" + JSON.stringify(res));'
  #           - '            response.send(event, context, response.SUCCESS, {});'
  #           - '         });'
  #           - '    }'
  #           - '    if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
  #           - '       const iam = new aws.IAM({ apiVersion: ''2010-05-08'', region: event.ResourceProperties.region});'
  #           - '        let authParams = { PolicyDocument: JSON.stringify(authParamsJson),RoleName: authRoleName};'
  #           - '        let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson),RoleName: unauthRoleName};'
  #           - '        promises.push(iam.updateAssumeRolePolicy(authParams).promise());'
  #           - '        promises.push(iam.updateAssumeRolePolicy(unauthParams).promise());'
  #           - '        Promise.all(promises)'
  #           - '         .then((res) => {'
  #           - '            console.log("createORupdate" + res);'
  #           - '            console.log("response data" + JSON.stringify(res));'
  #           - '            response.send(event, context, response.SUCCESS, {});'
  #           - '         });'
  #           - '    }'
  #           - '  } catch(err) {'
  #           - '       console.log(err.stack);'
  #           - '       responseData = {Error: err};'
  #           - '       response.send(event, context, response.FAILED, responseData);'
  #           - '       throw err;'
  #           - '  }'
  #           - '};'
  #     Handler: index.handler
  #     Runtime: nodejs10.x
  #     Timeout: '300'
  #     Role: !GetAtt 
  #       - UpdateRolesWithIDPFunctionRole
  #       - Arn
  # UpdateRolesWithIDPFunctionOutputs:
  #   Type: 'Custom::LambdaCallout'
  #   Properties:
  #     ServiceToken: !GetAtt 
  #       - UpdateRolesWithIDPFunction
  #       - Arn
  #     region: !Ref 'AWS::Region'
  #     idpId: !GetAtt 
  #       - authkendrachatbotd2fda923
  #       - Outputs.IdentityPoolId
  #     authRoleName: !Ref KendraAppAuthRoleName
  #     unauthRoleName: !Ref KendraAppUnauthRoleName
  # UpdateRolesWithIDPFunctionRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     RoleName: !Join 
  #       - ''
  #       - - !Ref KendraAppAuthRoleName
  #         - '-idp'
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #           Action:
  #             - 'sts:AssumeRole'
  #     Policies:
  #       - PolicyName: UpdateRolesWithIDPFunctionPolicy
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - 'logs:CreateLogGroup'
  #                 - 'logs:CreateLogStream'
  #                 - 'logs:PutLogEvents'
  #               Resource: 'arn:aws:logs:*:*:*'
  #             - Effect: Allow
  #               Action: 'iam:UpdateAssumeRolePolicy'
  #               Resource: !GetAtt 
  #                 - KendraAppAuthRole
  #                 - Arn
  #             - Effect: Allow
  #               Action: 'iam:UpdateAssumeRolePolicy'
  #               Resource: !GetAtt 
  #                 - KendraAppUnauthRole
  #                 - Arn
Outputs:
  Region:
    Description: CloudFormation provider root stack Region
    Value: !Ref 'AWS::Region'
    Export:
      Name: !Sub '${AWS::StackName}-Region'
  StackName:
    Description: CloudFormation provider root stack ID
    Value: !Ref 'AWS::StackName'
    Export:
      Name: !Sub '${AWS::StackName}-StackName'
  StackId:
    Description: CloudFormation provider root stack name
    Value: !Ref 'AWS::StackId'
    Export:
      Name: !Sub '${AWS::StackName}-StackId'
  # DeploymentBucketName:
  #   Description: CloudFormation provider root stack deployment bucket name
  #   Value: !Ref DeploymentBucketName
  #   Export:
  #     Name: !Sub '${AWS::StackName}-DeploymentBucketName'
  KendraAppAuthRoleArn:
    Value: !GetAtt 
      - KendraAppAuthRole
      - Arn
  KendraAppUnauthRoleArn:
    Value: !GetAtt 
      - KendraAppUnauthRole
      - Arn
  KendraAppAuthRoleName:
    Value: !Ref KendraAppAuthRole
  KendraAppUnauthRoleName:
    Value: !Ref KendraAppUnauthRole